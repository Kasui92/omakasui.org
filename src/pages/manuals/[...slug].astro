---
import ManualLayout from "../../layouts/ManualLayout.astro";
import ManualNav from "../../components/ManualNav.astro";
import ManualBreadcrumb from "../../components/ManualBreadcrumb.astro";
import ManualPageNav from "../../components/ManualPageNav.astro";
import MarkdownEnhancements from "../../components/MarkdownEnhancements.astro";
import ArchivedBanner from "../../components/ArchivedBanner.astro";
import {
  readManualPage,
  getManualGroups,
  getManualPages,
  getManualById,
} from "../../utils/manuals";
import {
  preprocessCallouts,
  postprocessCallouts,
} from "../../utils/calloutRenderer";

import "../../styles/manuals.css";
import { contentRenderer } from "../../utils/contentRenderer";

export async function getStaticPaths() {
  const groups = getManualGroups();
  const paths = [];

  for (const group of groups) {
    paths.push({
      params: { slug: group },
    });

    const pages = getManualPages(group);
    for (const pageInfo of pages) {
      if (pageInfo.slug !== "home") {
        paths.push({
          params: { slug: `${group}/${pageInfo.slug}` },
        });
      }
    }
  }

  return paths;
}

const { slug } = Astro.params;
const slugParts = slug?.split("/") || [];

// First part is the group, second part (if any) is the page (default to "home")
const group = slugParts[0];
const page = slugParts[1] || "home";

// Validate that group exists
if (!group) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

// Try to read the manual info
const manual = getManualById(group);
if (!manual) {
  return new Response(null, {
    status: 404,
    statusText: "Manual not found",
  });
}

// Try to read the manual page
let manualPage;
try {
  manualPage = readManualPage(group, page);
} catch (error) {
  return new Response(null, {
    status: 404,
    statusText: "Manual page not found",
  });
}

// Check that the page actually exists
if (!manualPage || !manualPage.content) {
  return new Response(null, {
    status: 404,
    statusText: "Manual page content not found",
  });
}

// Get all pages for navigation
let allPages;
try {
  allPages = getManualPages(group);
} catch (error) {
  return new Response(null, {
    status: 404,
    statusText: "Manual pages not found",
  });
}

// Navigation items
const currentPageIndex = allPages.findIndex((p) => p.slug === page);
const previousPage =
  currentPageIndex > 0 ? allPages[currentPageIndex - 1] : null;
const nextPage =
  currentPageIndex < allPages.length - 1
    ? allPages[currentPageIndex + 1]
    : null;

// Content processing
const content = contentRenderer(
  manualPage.content,
  [preprocessCallouts],
  [postprocessCallouts],
);

// Status of the manual
const isArchived = manual.status.includes("archived");
---

<ManualLayout
  title={`${manual.description ? manual.description : manual.title}${manualPage.title && manualPage.title !== "Home" ? ` - ${manualPage.title}` : ""}`}
>
  {isArchived && <ArchivedBanner dateArchived={manual.dateArchived} />}
  <header class="w-full">
    <ManualBreadcrumb
      currentPage={page}
      currentGroup={group}
      manual={manual}
      manualPage={manualPage}
    />
    <ManualNav currentGroup={group} currentPage={page} />
  </header>
  <main role="main" aria-label="Main content" class="mt-12 flex-1 md:mt-16">
    <section
      aria-labelledby="manual-heading"
      class={isArchived ? "mt-12 md:mt-16" : ""}
    >
      <h2 class="sr-only" id="manual-heading">
        {manual.title} - {manualPage.title}
      </h2>

      <div
        id="content"
        class="markdown-content mx-auto w-full max-w-3xl p-4 leading-relaxed break-words"
      >
        <Fragment set:html={content} />
      </div>

      <ManualPageNav
        group={group}
        previousPage={previousPage}
        nextPage={nextPage}
      />
    </section>
  </main>

  <MarkdownEnhancements />
</ManualLayout>
