---
import { getCollection, getEntry, render } from "astro:content";
import {
  getManual,
  parseManualCollectionId,
  sortManualPages,
} from "@/utils/manuals";

import ManualLayout from "@/layouts/ManualLayout.astro";
import ArchivedBanner from "@/components/ArchivedBanner.astro";
import ManualBreadcrumb from "@/components/ManualBreadcrumb.astro";
import ManualNav from "@/components/ManualNav.astro";
import ManualHelp from "@/components/ManualHelp.astro";
import MarkdownEnhancements from "@/components/MarkdownEnhancements.astro";
import ManualPageNav from "@/components/ManualPageNav.astro";

export async function getStaticPaths() {
  const manualCollection = await getCollection("manualsPages");

  // Group pages by their manual group
  const manualsByGroup = new Map<string, typeof manualCollection>();

  manualCollection.forEach((manual) => {
    const parsed = parseManualCollectionId(manual.id, true);
    if (!manualsByGroup.has(parsed.group)) {
      manualsByGroup.set(parsed.group, []);
    }
    manualsByGroup.get(parsed.group)!.push(manual);
  });

  // Sort pages within each group using the utility function
  manualsByGroup.forEach((pages) => {
    sortManualPages(pages);
  });

  // Generate paths
  const paths: any[] = [];

  manualsByGroup.forEach((pages) => {
    pages.forEach((manual, index) => {
      const parsed = parseManualCollectionId(manual.id, true);
      const isFirstPage = index === 0;

      paths.push({
        params: {
          slug: isFirstPage ? parsed.group : `${parsed.group}/${parsed.slug}`,
        },
        props: {
          id: manual.id,
          group: parsed.group,
          title: parsed.title,
          slug: parsed.slug,
          chapter: parsed.chapter,
          isFirstPage,
        },
      });
    });
  });

  return paths;
}

const { id, group, title, isFirstPage } = Astro.props;

const manualPage = await getEntry("manualsPages", id);
if (!manualPage) {
  return Astro.redirect("/manuals");
}

const manual = await getManual(group);
if (!manual) {
  return Astro.redirect(`/manuals`);
}

const { Content } = await render(manualPage);

// Decide if to include page title in document title or not
// If it's the first page and its title is "home", skip it
const shouldIncludePageTitle = !(isFirstPage && title.toLowerCase() === "home");
const pageTitle = `${manual.description ? manual.description : manual.title}${shouldIncludePageTitle && title ? ` - ${title}` : ""}`;
const isArchived = manual.status.includes("archived");
---

<ManualLayout title={pageTitle}>
  {isArchived && <ArchivedBanner dateArchived={manual.dateArchived} />}
  <header class="w-full">
    <ManualBreadcrumb id={manualPage.id} />
    <ManualNav id={manualPage.id} />
  </header>
  <main
    role="main"
    aria-label="Main content"
    class="mx-0 my-20 flex-1 px-0 py-0 md:my-16 md:px-8 lg:my-32 lg:px-16"
  >
    <section
      aria-labelledby="manual-heading"
      class={isArchived ? "mt-12 md:mt-16" : ""}
    >
      <h2 class="sr-only" id="manual-heading">
        {manual.title} - {title}
      </h2>

      <div
        id="content"
        class="markdown-content mx-auto w-full max-w-3xl p-4 leading-relaxed wrap-break-word"
      >
        <Content />
      </div>

      <ManualPageNav id={manualPage.id} />
    </section>
  </main>
  <ManualHelp />
  <MarkdownEnhancements />
</ManualLayout>
