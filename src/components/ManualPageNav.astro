---
import { getCollection } from "astro:content";
import { parseManualCollectionId } from "../utils/manuals";

interface Props {
  id: string;
}

const { id } = Astro.props;
const { group } = parseManualCollectionId(id, true);

const manualPages = (await getCollection("manualsPages")).filter((page) => {
  return page.id.startsWith(`${group}/`);
});

const navigationItems = manualPages
  .map((page) => {
    const parsed = parseManualCollectionId(page.id, true);
    return {
      id: page.id,
      slug: parsed.slug,
      title: parsed.title,
      url: `/manuals/${group}${parsed.slug === "home" ? "" : `/${parsed.slug}`}`,
      order: parsed.order,
      orderChapter: parsed.orderChapter,
      chapter: parsed.chapter,
    };
  })
  .sort((a, b) => {
    // First sort by chapter
    if (a.orderChapter !== undefined && b.orderChapter !== undefined) {
      if (a.orderChapter !== b.orderChapter) {
        return a.orderChapter - b.orderChapter;
      }
    }
    // Then sort by page
    return a.order - b.order;
  });

const currentIndex = navigationItems.findIndex((item) => item.id === id);
const previousPage =
  currentIndex > 0 ? navigationItems[currentIndex - 1] : null;
const nextPage =
  currentIndex < navigationItems.length - 1
    ? navigationItems[currentIndex + 1]
    : null;
---

{
  (previousPage || nextPage) && (
    <nav class="mx-auto max-w-3xl px-4 py-8" aria-label="Page navigation">
      <div class="flex items-center justify-between gap-4">
        {previousPage && previousPage.slug && previousPage.title ? (
          <a
            href={`/manuals/${group}${previousPage.slug === "home" ? "" : `/${previousPage.slug}`}`}
            class="group flex max-w-[calc(45%-1rem)] min-w-0 items-center gap-2 rounded-lg border border-[#333] bg-[#2a2a2a] px-4 py-3 text-[#f2f2f2e6] no-underline transition-all duration-300 hover:border-[#89b29e] hover:bg-[#333] hover:text-[#89b29e]"
          >
            <i class="nf nf-md-chevron_left flex-shrink-0 text-sm transition-transform group-hover:-translate-x-1" />
            <span class="overflow-hidden font-medium text-ellipsis whitespace-nowrap">
              {previousPage.title}
            </span>
          </a>
        ) : (
          <div />
        )}

        {nextPage && nextPage.slug && nextPage.title ? (
          <a
            href={`/manuals/${group}${nextPage.slug === "home" ? "" : `/${nextPage.slug}`}`}
            class="group flex max-w-[calc(45%-1rem)] min-w-0 items-center gap-2 rounded-lg border border-[#333] bg-[#2a2a2a] px-4 py-3 text-[#f2f2f2e6] no-underline transition-all duration-300 hover:border-[#89b29e] hover:bg-[#333] hover:text-[#89b29e]"
          >
            <span class="overflow-hidden font-medium text-ellipsis whitespace-nowrap">
              {nextPage.title}
            </span>
            <i class="nf nf-md-chevron_right flex-shrink-0 text-sm transition-transform group-hover:translate-x-1" />
          </a>
        ) : (
          <div />
        )}
      </div>
    </nav>
  )
}

<script is:inline define:vars={{ group, previousPage, nextPage }}>
  document.addEventListener("DOMContentLoaded", function () {
    // Only add keyboard navigation if there are navigation buttons
    if (!previousPage && !nextPage) return;

    function handleKeyPress(event) {
      // Only handle arrow keys if no input elements are focused
      if (
        document.activeElement?.tagName === "INPUT" ||
        document.activeElement?.tagName === "TEXTAREA" ||
        document.activeElement?.contentEditable === "true"
      ) {
        return;
      }

      switch (event.key) {
        case "ArrowLeft":
          if (previousPage && previousPage.slug && previousPage.title) {
            event.preventDefault();
            const url = `/manuals/${group}${previousPage.slug === "home" ? "" : `/${previousPage.slug}`}`;
            window.location.href = url;
          }
          break;
        case "ArrowRight":
          if (nextPage && nextPage.slug && nextPage.title) {
            event.preventDefault();
            const url = `/manuals/${group}${nextPage.slug === "home" ? "" : `/${nextPage.slug}`}`;
            window.location.href = url;
          }
          break;
      }
    }

    document.addEventListener("keydown", handleKeyPress);

    // Clean up event listener when component unmounts
    return () => {
      document.removeEventListener("keydown", handleKeyPress);
    };
  });
</script>
